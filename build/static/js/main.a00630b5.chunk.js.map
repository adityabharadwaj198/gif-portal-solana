{"version":3,"sources":["assets/like.svg","assets/dislike.svg","assets/coin.svg","App.js","index.js"],"names":["TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","onInputChange","event","value","target","getProvider","connection","Connection","Provider","window","solana","getGifList","a","provider","program","Program","console","log","account","fetch","publicKey","createGifAccount","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","toString","checkIfWalletIsConnected","isPhantom","connect","response","alert","error","connectWallet","sendGif","length","addGif","increment","button","gifLink","upvoteGif","decrement","tipSol","toAddress","transaction","Transaction","add","transfer","fromPubkey","toPubkey","lamports","feePayer","getRecentBlockhash","blockhashObj","blockhash","recentBlockhash","signTransaction","signed","sendRawTransaction","serialize","signature","confirmTransaction","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","alt","id","like","dislike","userAddress","coin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a00630b5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/like.35a23236.svg\";","export default __webpack_public_path__ + \"static/media/dislike.5bb86779.svg\";","export default __webpack_public_path__ + \"static/media/coin.99e6800f.svg\";","import React, { useEffect, useState } from 'react';\nimport like from './assets/like.svg';\nimport dislike from './assets/dislike.svg';\nimport coin from './assets/coin.svg';\nimport './App.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json'\n\n\n// Constants\nconst TWITTER_HANDLE = 'adi1yabharadwaj';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n// let baseAccount = Keypair.generate();\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst TEST_GIFS = [\n  'https://www.icegif.com/wp-content/uploads/icegif-1625.gif',\n  'https://im.indiatimes.in/media/content/2019/Sep/blinking_guy_meme_1569407297.gif',\n  'https://cdn.vox-cdn.com/thumbor/IeXiGi58sdd0ARvhKsWWVnng1yw=/800x0/filters:no_upscale()/cdn.vox-cdn.com/uploads/chorus_asset/file/8689071/My5Z2DO.gif',\n  'https://cdn.vox-cdn.com/thumbor/QW9Vl8MPGhJhp67r0PuftAuWcxs=/800x0/filters:no_upscale()/cdn.vox-cdn.com/uploads/chorus_asset/file/8687957/tenor.gif',\n  'https://cdn.vox-cdn.com/thumbor/lnif9KihwIQtAjlzkCN4WMimKck=/800x0/filters:no_upscale()/cdn.vox-cdn.com/uploads/chorus_asset/file/8689467/gatsby.gif',\n  'https://cdn.vox-cdn.com/thumbor/dqGNV0fvUzp8m1ElStnCNjirPsQ=/800x0/filters:no_upscale()/cdn.vox-cdn.com/uploads/chorus_asset/file/8689409/fellowkids.gif'\n]\n\n\n\nconst App = () => {\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  \n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  }\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"Here is the Account\", baseAccount);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect();\n          console.log('Connected with public key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n          console.log(\"Wallet address is \", walletAddress);\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with public key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"no link given\");\n      return;\n    } \n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"gif successfully sent to program\", inputValue);\n      await getGifList();\n    } catch (error) {\n      console.log(\"error sending gif:\", error);\n    }\n  };\n  \n\n  const increment = async (button, gifLink) => {\n    console.log(\"Inside increment\");\n    try {\n      console.log(\"Here\");\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      // send txn to solana blockchain();\n      await program.rpc.upvoteGif(gifLink,\n        {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Failed to upvote gif: \", gifLink, error);\n    }\n  };\n\n  const decrement = async(button, gifLink) => {\n    console.log(\"Inside decrement\");\n  }\n\n  const tipSol = async(toAddress) => {\n    var provider = getProvider();\n    var connection = new Connection(network, opts.preflightCommitment);\n    // var senderWallet = new web3.PublicKey(provider.wallet.publicKey);\n    console.log(\"here is the sender address {} & reciever address {}\", provider.wallet.publicKey, toAddress);\n    const transaction = new web3.Transaction().add(\n      web3.SystemProgram.transfer({\n        fromPubkey: provider.wallet.publicKey,\n        toPubkey: toAddress,\n        lamports: 100000,\n      }),\n    );\n\n    transaction.feePayer = await provider.wallet.publicKey;\n    let blockhashObj = await connection.getRecentBlockhash();\n    transaction.recentBlockhash = await blockhashObj.blockhash;\n\n    if (transaction) {\n      console.log(\"transaction created successsfully\");\n    }\n    \n    let signed = await provider.wallet.signTransaction(transaction);\n    let signature = await connection.sendRawTransaction(signed.serialize());\n    await connection.confirmTransaction(signature);\n    \n    console.log(\"here is the signature of the txn: \", signature);\n  }\n\n  const renderNotConnectedContainer = () => {\n    \n    console.log(\"in here renderNotConnectedContainer\");\n    return (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );} \n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    console.log(\"in here renderConnectedContainer\");\n\n    if (gifList === null) {\n      console.log(\"in here gifList == null\");\n\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n        </button>\n        </div>\n      )\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      console.log(\"in here gifList is not null\");\n\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n          </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <figure>\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} alt={item.gifLink}/>\n                </div>\n                <div className=\"button-grid\" > \n                  <button className=\"cta-button upvote-button\" onClick={() => increment(this, item.gifLink)}>\n                  <img id=\"like-button\" src={like} alt=\"like\"></img>\n                    <span> like </span>\n                  </button>\n                  <button className=\"cta-button upvote-button\" onClick={() => decrement(this, item.gifLink)}> \n                  <img id=\"dislike-button\" src={dislike} alt=\"dislike\"></img>\n                    <span> dislike </span>\n                  </button>\n                  <button id=\"tip-button\" className='cta-button upvote-button' onClick={() => tipSol(item.userAddress)}>\n                  <img src={coin} alt=\"coin\"></img>\n                    <span> tip </span>\n                  </button> \n                  </div>\n\n              </figure>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">may-may portal for dank mimirs</p>\n          <p className=\"sub-text\">\n            View your may-may collection in the metaverse ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          <div className={walletAddress ? 'authed-container' : 'container'}>\n          {walletAddress && renderConnectedContainer()}\n          </div>\n        </div>\n        <div className=\"footer-container\" >\n        Made with ❤️ by {TWITTER_LINK}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}